# Docker Compose - DN_SOLUTION2 Production Environment
version: '3.8'

env_file:
  - .env.prod

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: dn_solution_postgres_prod
    environment:
      POSTGRES_DB: ${DB_NAME:-dn_solution2_prod}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-dn_solution2_prod}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Redis 캐시 및 세션 스토어
  redis:
    image: redis:7-alpine
    container_name: dn_solution_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Django Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      args:
        INSTALL_DEV: "false"
    container_name: dn_solution_backend_prod
    environment:
      - DJANGO_SETTINGS_MODULE=dn_solution.settings.production
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-dn_solution2_prod}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - backend_static:/app/staticfiles
      - backend_media:/app/media
      - backend_logs:/app/logs
    command: >
      sh -c "
      python scripts/wait_for_db.py &&
      python manage.py migrate &&
      python manage.py collectstatic --noinput &&
      gunicorn --config gunicorn.conf.py dn_solution.wsgi:application
      "
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Celery Worker
  celery:
    build:
      context: .
      dockerfile: Dockerfile.backend
      args:
        INSTALL_DEV: "false"
    container_name: dn_solution_celery_prod
    environment:
      - DJANGO_SETTINGS_MODULE=dn_solution.settings.production
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-dn_solution2_prod}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - backend_media:/app/media
      - backend_logs:/app/logs
    command: >
      sh -c "
      python scripts/wait_for_db.py &&
      celery -A dn_solution worker -l info --concurrency=4 --max-tasks-per-child=100
      "
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Celery Beat
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.backend
      args:
        INSTALL_DEV: "false"
    container_name: dn_solution_celery_beat_prod
    environment:
      - DJANGO_SETTINGS_MODULE=dn_solution.settings.production
      - DATABASE_URL=postgresql://${DB_USER:-postgres}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-dn_solution2_prod}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - backend_logs:/app/logs
    command: >
      sh -c "
      python scripts/wait_for_db.py &&
      celery -A dn_solution beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
      "
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: dn_solution_frontend_prod
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx 리버스 프록시
  nginx:
    image: nginx:alpine
    container_name: dn_solution_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - backend_static:/var/www/static:ro
      - backend_media:/var/www/media:ro
    depends_on:
      - backend
      - frontend
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_static:
    driver: local
  backend_media:
    driver: local
  backend_logs:
    driver: local

networks:
  default:
    name: dn_solution_prod_network
    driver: bridge
