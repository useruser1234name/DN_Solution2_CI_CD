# Generated by Django 4.2.7 on 2025-08-25 14:34

from django.db import migrations
import logging

logger = logging.getLogger('orders')


def migrate_telecom_orders_to_orders(apps, schema_editor):
    """TelecomOrder 데이터를 Order 모델로 이전"""
    try:
        # 모델 가져오기
        TelecomOrder = apps.get_model('orders', 'TelecomOrder')
        Order = apps.get_model('orders', 'Order')
        
        telecom_orders = TelecomOrder.objects.all()
        migrated_count = 0
        
        logger.info(f"TelecomOrder 데이터 이전 시작: {telecom_orders.count()}개")
        
        for telecom_order in telecom_orders:
            try:
                # 기존 Order가 있는지 확인 (중복 방지)
                existing_order = Order.objects.filter(
                    policy=telecom_order.policy,
                    company=telecom_order.company,
                    order_number=telecom_order.order_number
                ).first()
                
                if existing_order:
                    logger.info(f"이미 존재하는 주문 건너뜀: {telecom_order.order_number}")
                    continue
                
                # 상태 매핑
                status_mapping = {
                    'received': 'received',
                    'activation_request': 'activation_request',
                    'activating': 'activating',
                    'activation_complete': 'activation_complete',
                    'cancelled': 'cancelled',
                    'pending': 'pending',
                    'rejected': 'rejected',
                }
                
                # Order 생성
                order = Order.objects.create(
                    policy=telecom_order.policy,
                    company=telecom_order.company,
                    created_by=telecom_order.created_by,
                    
                    # TelecomOrder 특화 필드들
                    order_number=telecom_order.order_number,
                    carrier=telecom_order.carrier,
                    subscription_type=telecom_order.subscription_type,
                    received_date=telecom_order.received_date,
                    activation_date=telecom_order.activation_date,
                    order_data=telecom_order.order_data,
                    
                    # 상태 매핑
                    status=status_mapping.get(telecom_order.current_status, 'pending'),
                    
                    # 기본값들 (나중에 수정 가능)
                    customer_name=telecom_order.order_data.get('customer_name', 'Unknown') if telecom_order.order_data else 'Unknown',
                    customer_phone=telecom_order.order_data.get('phone_number', '') if telecom_order.order_data else '',
                    customer_address=telecom_order.order_data.get('customer_address', '') if telecom_order.order_data else '',
                    total_amount=0,  # 나중에 계산
                    rebate_amount=0,  # 나중에 계산
                    
                    # 시간 정보 유지
                    created_at=telecom_order.created_at,
                    updated_at=telecom_order.updated_at,
                )
                
                migrated_count += 1
                logger.info(f"TelecomOrder 이전 완료: {telecom_order.order_number} -> Order {order.id}")
                
            except Exception as e:
                logger.error(f"TelecomOrder 이전 실패: {telecom_order.order_number} - {str(e)}")
                continue
        
        logger.info(f"TelecomOrder 데이터 이전 완료: {migrated_count}개 성공")
        
    except Exception as e:
        logger.error(f"TelecomOrder 데이터 이전 중 오류: {str(e)}")
        raise


def reverse_migrate_telecom_orders(apps, schema_editor):
    """역방향 마이그레이션 - 이전된 Order 데이터 삭제"""
    Order = apps.get_model('orders', 'Order')
    
    # TelecomOrder에서 이전된 Order들 삭제 (order_number가 있는 것들)
    migrated_orders = Order.objects.exclude(order_number__isnull=True).exclude(order_number='')
    count = migrated_orders.count()
    migrated_orders.delete()
    
    logger.info(f"이전된 Order 데이터 삭제 완료: {count}개")


class Migration(migrations.Migration):

    dependencies = [
        ('orders', '0010_integrate_telecom_order'),
    ]

    operations = [
        migrations.RunPython(
            migrate_telecom_orders_to_orders,
            reverse_migrate_telecom_orders
        ),
    ]
